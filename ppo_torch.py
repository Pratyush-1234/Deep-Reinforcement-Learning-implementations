# -*- coding: utf-8 -*-
"""PPO_torch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NCc_BDWQsGXEeNJbRN4UEZYgtenIodPb
"""

from scipy.stats import norm as Normal

import os
import numpy as np
import torch as T
import torch.nn as nn
import torch.optim as optim
from torch.distributions import Normal
os.makedirs("/tmp/ppo", exist_ok=True)
class PPOMemory():
    def __init__(self, batch_size):
        self.states = []
        self.probs = []
        self.vals = []
        self.actions = []
        self.rewards = []
        self.dones = []

        self.batch_size = batch_size

    def generate_batches(self):
        n_states = len(self.states)
        batch_start = np.arange(0, n_states, self.batch_size)
        indices = np.arange(n_states, dtype=np.int64)
        np.random.shuffle(indices)
        batches = [indices[i:i+self.batch_size] for i in batch_start]

        return np.array(self.states),\
                np.array(self.actions),\
                np.array(self.probs),\
                np.array(self.vals),\
                np.array(self.rewards),\
                np.array(self.dones),\
                batches

    def store_memory(self, state, action, probs, vals, reward, done):
        self.states.append(state)
        self.actions.append(action)
        self.probs.append(probs)
        self.vals.append(vals)
        self.rewards.append(reward)
        self.dones.append(done)

    def clear_memory(self):
        self.states = []
        self.probs = []
        self.actions = []
        self.rewards = []
        self.dones = []
        self.vals = []

class ActorNetwork(nn.Module):
    def __init__(self, n_actions, input_dims, alpha,
            fc1_dims=256, fc2_dims=256, chkpt_dir='/tmp/ppo'):
        super(ActorNetwork, self).__init__()

        self.checkpoint_file = os.path.join(chkpt_dir, 'actor_torch_ppo')
        self.actor = nn.Sequential(
                nn.Linear(*input_dims, fc1_dims),
                nn.ReLU(),
                nn.Linear(fc1_dims, fc2_dims),
                nn.ReLU(),
                nn.Linear(fc2_dims, n_actions),
                nn.Softmax(dim=-1)
        )
        self.log_std = nn.Parameter(T.zeros(n_actions))
        self.optimizer = optim.Adam(self.parameters(), lr=alpha)
        self.device = T.device('cuda:0' if T.cuda.is_available() else 'cpu')
        self.to(self.device)

    def forward(self, state):
        mean = self.actor(state)
        std = self.log_std.exp().expand_as(mean)
        dist = Normal(mean, std)

        return dist

    def save_checkpoint(self):
        T.save(self.state_dict(), self.checkpoint_file)

    def load_checkpoint(self):
        self.load_state_dict(T.load(self.checkpoint_file))

class CriticNetwork(nn.Module):
    def __init__(self, input_dims, alpha, fc1_dims=256, fc2_dims=256,
            chkpt_dir='/tmp/ppo'):
        super(CriticNetwork, self).__init__()

        self.checkpoint_file = os.path.join(chkpt_dir, 'critic_torch_ppo')
        self.critic = nn.Sequential(
                nn.Linear(*input_dims, fc1_dims),
                nn.ReLU(),
                nn.Linear(fc1_dims, fc2_dims),
                nn.ReLU(),
                nn.Linear(fc2_dims, 1)
        )

        self.optimizer = optim.Adam(self.parameters(), lr=alpha)
        self.device = T.device('cuda:0' if T.cuda.is_available() else 'cpu')
        self.to(self.device)

    def forward(self, state):
        value = self.critic(state)

        return value

    def save_checkpoint(self):
        T.save(self.state_dict(), self.checkpoint_file)

    def load_checkpoint(self):
        self.load_state_dict(T.load(self.checkpoint_file))

class Agent():
    def __init__(self, n_actions, input_dims, gamma=0.99, alpha=0.0003, gae_lambda=0.95,
            policy_clip=0.2, batch_size=64, n_epochs=10):
        self.gamma = gamma
        self.policy_clip = policy_clip
        self.n_epochs = n_epochs
        self.gae_lambda = gae_lambda

        self.actor = ActorNetwork(n_actions, input_dims, alpha)
        self.critic = CriticNetwork(input_dims, alpha)
        self.memory = PPOMemory(batch_size)

    def remember(self, state, action, probs, vals, reward, done):
        self.memory.store_memory(state, action, probs, vals, reward, done)

    def save_models(self):
        print('... saving models ...')
        self.actor.save_checkpoint()
        self.critic.save_checkpoint()

    def load_models(self):
        print('... loading models ...')
        self.actor.load_checkpoint()
        self.critic.load_checkpoint()

    def choose_action(self, observation):
        state = T.tensor([observation], dtype=T.float).to(self.actor.device)

        dist = self.actor(state)
        value = self.critic(state)
        action = dist.sample()

        probs = dist.log_prob(action).sum(axis=-1).item()
        action = action.cpu().numpy()[0]
        value = T.squeeze(value).item()

        return action, probs, value

    def learn(self):
        for _ in range(self.n_epochs):
            state_arr, action_arr, old_prob_arr, vals_arr,\
            reward_arr, dones_arr, batches = \
                    self.memory.generate_batches()

            values = vals_arr
            advantage = np.zeros(len(reward_arr), dtype=np.float32)

            for t in range(len(reward_arr)-1):
                discount = 1
                a_t = 0
                for k in range(t, len(reward_arr)-1):
                    a_t += discount*(reward_arr[k] + self.gamma*values[k+1]*\
                            (1-int(dones_arr[k])) - values[k])
                    discount *= self.gamma*self.gae_lambda
                advantage[t] = a_t
            advantage = T.tensor(advantage).to(self.actor.device)

            values = T.tensor(values).to(self.actor.device)
            for batch in batches:
                states = T.tensor(state_arr[batch], dtype=T.float).to(self.actor.device)
                old_probs = T.tensor(old_prob_arr[batch]).to(self.actor.device)
                actions = T.tensor(action_arr[batch]).to(self.actor.device)

                dist = self.actor(states)
                critic_value = self.critic(states)

                critic_value = T.squeeze(critic_value)

                new_probs = dist.log_prob(actions).sum(axis=-1)
                prob_ratio = new_probs.exp() / old_probs.exp()

                weighted_probs = advantage[batch] * prob_ratio
                weighted_clipped_probs = T.clamp(prob_ratio, 1-self.policy_clip,
                        1+self.policy_clip)*advantage[batch]
                actor_loss = -T.min(weighted_probs, weighted_clipped_probs).mean()

                returns = advantage[batch] + values[batch]
                critic_loss = (returns-critic_value)**2
                critic_loss = critic_loss.mean()

                total_loss = actor_loss + 0.5*critic_loss
                self.actor.optimizer.zero_grad()
                self.critic.optimizer.zero_grad()
                total_loss.backward()
                self.actor.optimizer.step()
                self.critic.optimizer.step()

        self.memory.clear_memory()

import gym
from gym import spaces
import numpy as np

class BoxNavigationEnv(gym.Env):
    def __init__(self):
        super(BoxNavigationEnv, self).__init__()

        self.action_space = spaces.Box(low=-1, high=1, shape=(2,), dtype=np.float32)
        self.observation_space = spaces.Box(low=0, high=1, shape=(2,), dtype=np.float32)

        self.goal_position = np.array([0.9, 0.9])
        self.initial_position = np.array([0.1, 0.1])
        self.obstacles = [
            {'position': np.array([0.5, 0.5]), 'size': 0.1},
            {'position': np.array([0.2, 0.8]), 'size': 0.1},
        ]

        self.state = self.initial_position.copy()
        self.path_length = 0.0

    def reset(self):
        """Reset the environment to the initial state with some randomness."""
        self.state = self.initial_position + np.random.uniform(-0.05, 0.05, size=2)
        self.state = np.clip(self.state, 0, 1)
        self.path_length = 0.0  # Reset path length at the start of a new episode
        return self.state

    def step(self, action):
        previous_state = self.state.copy()
        # Clip the action to stay within bounds and scale it
        self.state = np.clip(self.state + action * 0.1, 0, 1)

        # Calculate the distance traveled in this step
        step_distance = np.linalg.norm(self.state - previous_state)
        self.path_length += step_distance

        # Calculate distance to goal
        distance_to_goal = np.linalg.norm(self.state - self.goal_position)

        # Check if the agent has reached the goal
        if distance_to_goal < 0.05:
            reward = 100  # Reward for reaching the goal
            done = True
            info = {"truncated": False, "path_length": self.path_length, "reached_goal": True}
            return self.reset(), reward, done, info

        # Check for collisions with obstacles
        for obstacle in self.obstacles:
            if np.linalg.norm(self.state - obstacle['position']) < obstacle['size']:
                reward = -100  # Penalty for hitting an obstacle
                done = True
                info = {"truncated": False, "path_length": self.path_length, "reached_goal": False}
                return self.reset(), reward, done, info

        # Step penalty
        reward = -1
        done = False
        info = {"truncated": False, "path_length": self.path_length, "reached_goal": False}

        return self.state, reward, done, info

import gym
import numpy as np
import matplotlib.pyplot as plt
if __name__ == '__main__':
    env = BoxNavigationEnv()
    N = 20
    batch_size = 5
    n_epochs = 4
    alpha = 0.0003
    agent = Agent(n_actions=env.action_space.shape[0], batch_size=batch_size,
                    alpha=alpha, n_epochs=n_epochs,
                    input_dims=env.observation_space.shape)
    n_games = 100

    figure_file = 'plots/cartpole.png'

    best_score = env.reward_range[0]
    score_history = []
    avg_score_history = []

    learn_iters = 0
    avg_score = 0
    n_steps = 0
    observations=[]
    actions=[]
    path_length=[]
    for i in range(n_games):
        observation = env.reset()
        done = False
        score = 0
        while not done:
            action, prob, val = agent.choose_action(observation)
            observation_, reward, done, info = env.step(action)

            n_steps += 1
            score += reward
            agent.remember(observation, action, prob, val, reward, done)
            if n_steps % N == 0:
                agent.learn()
                learn_iters += 1
            observation = observation_
            observations.append(observation)
            actions.append(action)
        path_length.append(info["path_length"])
        score_history.append(score)
        avg_score = np.mean(score_history[-100:])
        avg_score_history.append(avg_score)
        if avg_score > best_score:
            best_score = avg_score
            agent.save_models()

        print('episode', i, 'score %.1f' % score, 'avg score %.1f' % avg_score,
                'time_steps', n_steps, 'learning_steps', learn_iters)
    r = range(n_games)
    observations = np.array(observations)
    actions = np.array(actions)
    plt.plot(r,path_length)
    plt.xlabel('Episode')
    plt.ylabel('path length')
    plt.title('path length Over Time')
    plt.show()
    plt.plot(r,avg_score_history)
    plt.xlabel('Episode')
    plt.ylabel('Average Score')
    plt.title('Average Score Over Time')
    plt.show()
    plt.plot(actions)
    plt.xlabel('Time Step')
    plt.ylabel('Actions')
    plt.title('Actions Over Time')
    plt.show()
    plt.plot(observations)
    plt.xlabel('Time Step')
    plt.ylabel('Observations')
    plt.title('Observations Over Time')
    plt.show()
    # Testing the Model
    n_test_games = 10
    test_scores = []
    path_length = []
    reached_goal = []
    for i in range(n_test_games):
      observation = env.reset()
      done = False
      score = 0
      while not done:
        action, prob, val = agent.choose_action(observation)
        observation_,reward,done,info = env.step(action)
        score += reward
        observation = observation_
      path_length.append(info["path_length"])
      reached_goal.append(info["reached_goal"])
      test_scores.append(score)
      print('Test episode ', i, 'score %.1f' % score)
    avg_test_score=np.mean(test_scores)
    print('Average test score: %.1f' % avg_test_score)
    plt.plot(range(n_test_games), test_scores)
    plt.xlabel('Test Episode')
    plt.ylabel('Score')
    plt.title('Test Scores Over Episodes')
    plt.show()
    plt.plot(range(n_test_games),path_length)
    plt.xlabel('Episode')
    plt.ylabel('path length')
    plt.title('Test path length Over Time')
    plt.show()
    plt.plot(np.cumsum(reached_goal) / np.arange(1, n_test_games + 1))
    plt.xlabel('Episode')
    plt.ylabel('Proportion of Episodes Reached Goal')
    plt.title('Proportion of Episodes Reached Goal Over Time')
    plt.show()